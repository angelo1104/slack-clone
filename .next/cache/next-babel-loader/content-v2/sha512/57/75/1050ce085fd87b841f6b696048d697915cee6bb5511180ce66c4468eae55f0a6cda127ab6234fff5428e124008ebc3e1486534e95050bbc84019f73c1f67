{"ast":null,"code":"import _defineProperty from \"/home/madhav/Documents/Web Development/NextJS/slack-clone/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nvar countSlice = createSlice({\n  name: \"count\",\n  initialState: {\n    count: 0,\n    update: 1\n  },\n  reducers: {\n    increment: function increment(state, action) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count + state.update\n      });\n    },\n    decrement: function decrement(state, action) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count - state.update\n      });\n    },\n    setUpdate: function setUpdate(state, action) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        update: action.payload\n      });\n    }\n  }\n});\nvar countActions = countSlice.actions,\n    countReducer = countSlice.reducer;\nexport { countActions, countReducer };","map":{"version":3,"sources":["/home/madhav/Documents/Web Development/NextJS/slack-clone/src/redux/countReducer.ts"],"names":["createSlice","countSlice","name","initialState","count","update","reducers","increment","state","action","decrement","setUpdate","payload","countActions","actions","countReducer","reducer"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAOA,IAAMC,UAAe,GAAGD,WAAW,CAAC;AAClCE,EAAAA,IAAI,EAAE,OAD4B;AAElCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,CADK;AAEZC,IAAAA,MAAM,EAAE;AAFI,GAFoB;AAMlCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SADQ,qBACEC,KADF,EACqBC,MADrB,EACkD;AACxD,6CACKD,KADL;AAEEJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACH;AAF7B;AAID,KANO;AAORK,IAAAA,SAPQ,qBAOEF,KAPF,EAOqBC,MAPrB,EAOkD;AACxD,6CACKD,KADL;AAEEJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACH;AAF7B;AAID,KAZO;AAaRM,IAAAA,SAbQ,qBAaEH,KAbF,EAaqBC,MAbrB,EAaoD;AAC1D,6CACKD,KADL;AAEEH,QAAAA,MAAM,EAAEI,MAAM,CAACG;AAFjB;AAID;AAlBO;AANwB,CAAD,CAAnC;IA4BiBC,Y,GAAwCZ,U,CAAjDa,O;IAAgCC,Y,GAAiBd,U,CAA1Be,O;AAE/B,SAASH,YAAT,EAAuBE,YAAvB","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ntype SliceState = {\n  count: number;\n  update: number;\n};\n\nconst countSlice: any = createSlice({\n  name: \"count\",\n  initialState: {\n    count: 0,\n    update: 1,\n  },\n  reducers: {\n    increment(state: SliceState, action: PayloadAction<null>) {\n      return {\n        ...state,\n        count: state.count + state.update,\n      };\n    },\n    decrement(state: SliceState, action: PayloadAction<null>) {\n      return {\n        ...state,\n        count: state.count - state.update,\n      };\n    },\n    setUpdate(state: SliceState, action: PayloadAction<number>) {\n      return {\n        ...state,\n        update: action.payload,\n      };\n    },\n  },\n});\n\nconst { actions: countActions, reducer: countReducer } = countSlice;\n\nexport { countActions, countReducer };\n"]},"metadata":{},"sourceType":"module"}