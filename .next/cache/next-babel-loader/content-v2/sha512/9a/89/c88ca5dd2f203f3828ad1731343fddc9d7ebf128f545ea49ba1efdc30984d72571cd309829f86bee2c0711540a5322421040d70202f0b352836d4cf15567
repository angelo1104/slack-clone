{"ast":null,"code":"import _defineProperty from \"/home/madhav/Documents/Web Development/NextJS/slack-clone/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport { createWrapper, HYDRATE } from \"next-redux-wrapper\";\nimport { countReducer } from \"./countReducer\";\nvar reducer = combineReducers({\n  count: countReducer\n}); // create your reducer\n// const rootReducer = createReducer(\n//   {},\n//   {\n//     HYDRATE: (state, action) => {\n//       // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//       // Read more about it here https://bit.ly/2ZsXbwA.\n//       const nextState = {\n//         ...state,\n//         ...action.payload,\n//       };\n//\n//       console.log(\"nexter\", nextState);\n//\n//       return nextState;\n//     },\n//   },\n// );\n\nvar rootReducer = function rootReducer(state, action) {\n  if (action.type === HYDRATE) {\n    // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n    // Read more about it here https://bit.ly/2ZsXbwA.\n    var nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    return nextState;\n  } else {\n    return reducer(state, action);\n  }\n};\n\nvar store = configureStore({\n  reducer: rootReducer\n}); // create a makeStore function\n\nvar makeStore = function makeStore() {\n  return store;\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/home/madhav/Documents/Web Development/NextJS/slack-clone/src/redux/store.ts"],"names":["combineReducers","configureStore","createWrapper","HYDRATE","countReducer","reducer","count","rootReducer","state","action","type","nextState","payload","store","makeStore","wrapper","debug"],"mappings":";;;;;;AAAA,SAASA,eAAT,EAA0BC,cAA1B,QAAgD,kBAAhD;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,oBAAvC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAUA,IAAMC,OAAO,GAAGL,eAAe,CAAC;AAC9BM,EAAAA,KAAK,EAAEF;AADuB,CAAD,CAA/B,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAaC,MAAb,EAA6B;AAC/C,MAAIA,MAAM,CAACC,IAAP,KAAgBP,OAApB,EAA6B;AAC3B;AACA;AACA,QAAMQ,SAAS,mCACVH,KADU,GAEVC,MAAM,CAACG,OAFG,CAAf;;AAKA,WAAOD,SAAP;AACD,GATD,MASO;AACL,WAAON,OAAO,CAACG,KAAD,EAAQC,MAAR,CAAd;AACD;AACF,CAbD;;AAeA,IAAMI,KAAK,GAAGZ,cAAc,CAAC;AAC3BI,EAAAA,OAAO,EAAEE;AADkB,CAAD,CAA5B,C,CAIA;;AACA,IAAMO,SAAc,GAAG,SAAjBA,SAAiB;AAAA,SAAMD,KAAN;AAAA,CAAvB,C,CAEA;;;AACA,OAAO,IAAME,OAAO,GAAGb,aAAa,CAAQY,SAAR,EAAmB;AAAEE,EAAAA,KAAK,EAAE;AAAT,CAAnB,CAA7B","sourcesContent":["import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport { createWrapper, HYDRATE } from \"next-redux-wrapper\";\nimport { countReducer } from \"./countReducer\";\n\nexport interface State {\n  init: any;\n  count: {\n    count: number;\n    update: number;\n  };\n}\n\nconst reducer = combineReducers({\n  count: countReducer,\n});\n\n// create your reducer\n// const rootReducer = createReducer(\n//   {},\n//   {\n//     HYDRATE: (state, action) => {\n//       // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//       // Read more about it here https://bit.ly/2ZsXbwA.\n//       const nextState = {\n//         ...state,\n//         ...action.payload,\n//       };\n//\n//       console.log(\"nexter\", nextState);\n//\n//       return nextState;\n//     },\n//   },\n// );\n\nconst rootReducer = (state: any, action: any) => {\n  if (action.type === HYDRATE) {\n    // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n    // Read more about it here https://bit.ly/2ZsXbwA.\n    const nextState = {\n      ...state,\n      ...action.payload,\n    };\n\n    return nextState;\n  } else {\n    return reducer(state, action);\n  }\n};\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\n// create a makeStore function\nconst makeStore: any = () => store;\n\n// export an assembled wrapper\nexport const wrapper = createWrapper<State>(makeStore, { debug: true });\nexport type AppDispatch = typeof store.dispatch;\n"]},"metadata":{},"sourceType":"module"}