{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport { createWrapper, HYDRATE } from \"next-redux-wrapper\";\nimport { countReducer } from \"./countReducer\";\nconst reducer = combineReducers({\n  count: countReducer\n}); // create your reducer\n// const rootReducer = createReducer(\n//   {},\n//   {\n//     HYDRATE: (state, action) => {\n//       // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n//       // Read more about it here https://bit.ly/2ZsXbwA.\n//       const nextState = {\n//         ...state,\n//         ...action.payload,\n//       };\n//\n//       console.log(\"nexter\", nextState);\n//\n//       return nextState;\n//     },\n//   },\n// );\n\nconst rootReducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    // Attention! This will overwrite client state! Real apps should use proper reconciliation.\n    // Read more about it here https://bit.ly/2ZsXbwA.\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    return nextState;\n  } else {\n    return reducer(state, action);\n  }\n};\n\nconst store = configureStore({\n  reducer: rootReducer\n}); // create a makeStore function\n\nconst makeStore = () => store; // export an assembled wrapper\n\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":null,"metadata":{},"sourceType":"module"}