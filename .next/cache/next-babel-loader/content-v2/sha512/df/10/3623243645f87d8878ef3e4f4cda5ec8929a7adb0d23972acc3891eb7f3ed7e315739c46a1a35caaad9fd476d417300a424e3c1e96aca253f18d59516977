{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst countSlice = createSlice({\n  name: \"count\",\n  initialState: {\n    count: 0,\n    update: 1\n  },\n  reducers: {\n    increment(state, action) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count + state.update\n      });\n    },\n\n    decrement(state, action) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count - state.update\n      });\n    },\n\n    setUpdate(state, action) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        update: action.payload\n      });\n    }\n\n  }\n});\nconst {\n  actions: countActions,\n  reducer: countReducer\n} = countSlice;\nexport { countActions, countReducer };","map":null,"metadata":{},"sourceType":"module"}